name: Shellcode Injection
challenges:
- id: level-4
  name: ello ackers!
  description: Write and execute shellcode to read the flag, but your inputted data is filtered before execution.
- id: level-5
  name: Syscall Smuggler
  description: Write and execute shellcode to read the flag, but the inputted data cannot contain any form of system call
    bytes (syscall, sysenter, int), can you defeat this?
- id: level-6
  name: Syscall Shenanigans
  description: Write and execute shellcode to read the flag, but the inputted data cannot contain any form of system call
    bytes (syscall, sysenter, int), this challenge adds an extra layer of difficulty!
- id: level-8
  name: Byte Budget
  description: Write and execute shellcode to read the flag, but you only get 18 bytes.
- id: level-9
  name: ClobberCode
  description: Write and execute shellcode to read the flag, but your input has data inserted into it before being executed.
- id: level-12
  name: Diverse Delivery
  description: Write and execute shellcode to read the flag, but every byte in your input must be unique.
- id: level-13
  name: Pocket Payload
  description: Write and execute shellcode to read the flag, but this time you only get 12 bytes!
- id: level-14
  name: Micro Menace
  description: "Write and execute shellcode to read the flag, but this time you only get 6 bytes :)"
resources:
- name: "Shellcode Injection: Introduction"
  type: lecture
  video: 715v_-YnpT8
  playlist: PL-ymxv0nOtqomtHqMqqgpuvWdVSs9NCBK
  slides: 1kkfh-dhgxfIZPB1ziyW2JQiC1MbQWn8c7e24kOoDxJ4
- name: "Shellcode Injection: Common Challenges"
  type: lecture
  video: i1jXV8W-CYQ
  playlist: PL-ymxv0nOtqomtHqMqqgpuvWdVSs9NCBK
  slides: 1BHsKKkodMLXcHyqJCU0wDgexQ8jHEEiAU9Uq_Z9mibY
- name: "Shellcode Injection: Data Execution Prevention"
  type: lecture
  video: GH4NBLtPmyo
  playlist: PL-ymxv0nOtqomtHqMqqgpuvWdVSs9NCBK
  slides: 1tH6jbnpX2_T5ZeDzZBfpLZ-ngpIZp3g25PPQaTr52JU
- name: "[SLIDES ONLY] Shellcode Injection: Introduction"
  type: lecture
  slides: 1xDFuZJ0uQDQVYEXlSMt1T5RfEGFYOUWLBWUmcSbEpE0
- name: "[SLIDES ONLY] Shellcode Injection: Writing Shellcode"
  type: lecture
  slides: 1NadBrhE3UGweOL4tBv9PH_Q_DVcNCHfs1UJvDEULPQU
- name: "[SLIDES ONLY] Shellcode Injection: Debugging Shellcode"
  type: lecture
  slides: 1vqWvB4Nf3edISudyOhab60nj5flj0LowUjDPDVQkXaI
- name: "[SLIDES ONLY] Shellcode Injection: Forbidden Bytes"
  type: lecture
  slides: 1hPytJU8zOnWBG2bEVrt90evWZt8exJd4CHyjHGM-W6Y
- name: "[SLIDES ONLY] Shellcode Injection: Common Gotchas"
  type: lecture
  slides: 1lJ30DUtUK_HYtTRLRkNhAzUvFXTEg8T5Z4rO_EI-SMA
- name: "[SLIDES ONLY] Shellcode Injection: Cross-Architecture Shellcode"
  type: lecture
  slides: 1cuciNDnrPv2WGGQRjmNBTbRCwDhTlaKTp1lNvh4rnpE
- name: "[SLIDES ONLY] Shellcode Injection: Data Execution Prevention"
  type: lecture
  slides: 1tH6jbnpX2_T5ZeDzZBfpLZ-ngpIZp3g25PPQaTr52JU
- name: Further Reading
  type: markdown
  content: |
    Lots of external resources are referred to in the module videos.
    Additionally, the following reading material is useful:

    - [Wikipedia](https://en.wikipedia.org/wiki/Shellcode)
    - [x86_64 assembly listing](http://ref.x86asm.net/coder64.html)
    - [Syscall Table](https://blog.rchapman.org/posts/Linux_System_Call_Table_for_x86_64/)
    - [Another syscall table, with multiple architectures!](https://syscall.sh/)
